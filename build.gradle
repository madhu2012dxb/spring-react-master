apply plugin: 'org.sonarqube'

buildscript {
    ext {
        springBootVersion = '2.0.4.RELEASE'
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.palantir.docker:com.palantir.docker.gradle.plugin:0.22.1")
        classpath("com.palantir.docker-run:com.palantir.docker-run.gradle.plugin:0.22.1")
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3'

    }
}

allprojects {
    group = 'com.jaat.geeky'
    version = '0.0.1'

    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'jacoco'


    sonarqube {
        properties {
            property "sonar.sources", "src"
            property "sonar.verbose", "true"
            property "sonar.multipleSonarProfiles", "true"
            property "sonar.log.level", "TRACE"
            property "sonar.projectName", "spring-react"
            property "sonar.projectKey", "spring-react"
            property "sonar.login", "admin"
            property "sonar.password", "Mad@1234"

        }
    }


}

subprojects {
    sonarqube {
        properties{

        }
    }

    test{
        finalizedBy jacocoTestReport
        jacoco{
            destinationFile=layout.buildDirectory.file('coverage-reports/jacoco-ut.exec').get().asFile
        }

    }

    jacocoTestReport {
        dependsOn test

        reports{
            xml {
                enabled=true
                destination file("$buildDir/reports/jacoco/jacoco-ut.xml")
            }
        }
    }



}

sonarqube {
    properties {
        property "sonar.testExecutionReportPaths", "${project.rootDir}/react-app/reports/test-reporter.xml"
    }
}
project(":react-app") {
    sonarqube {
        properties {
            property "sonar.inclusions", "**/src/**/*.js"
            property "sonar.exclusions", "**/src/**/*.jsx"
            property "sonar.javascript.lcov.reportPaths", "coverage/lcov.info"
        }
    }}
project(":spring-app") {
    sonarqube {
        properties {
            property "sonar.language", "java"
            property "sonar.inclusions", "**/src/main/java/**"
            property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/jacoco-ut.xml"
        }
    }}

def aggregateCoverageFile ="$buildDir/coverage-reports/jacoco-aggregate.exec"

task jacocoMergeTestData(type:JacocoMerge){
    destinationFile = file(aggregateCoverageFile)
    executionData=files(subprojects.jacocoTestReport.executionData).filter {f->f.exists()}
}

task jacocoRootReport (type:JacocoReport){
    dependsOn jacocoMergeTestData

    getAdditionalSourceDirs().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    getSourceDirectories().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    getClassDirectories().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    getExecutionData().setFrom(files(subprojects.jacocoTestReport.executionData).filter {f -> f.exists()})

    reports{
        xml{
            enabled= true
            destination file("$buildDir/reports/jacoco-aggregate/jacoco-aggregate.xml")
        }
    }


}

assemble.dependsOn(subprojects.assemble)
build.dependsOn(subprojects.build)
build.finalizedBy(jacocoRootReport)
